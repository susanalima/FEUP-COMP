options {
  LOOKAHEAD = 1;
 }
 PARSER_BEGIN(Alpha)
 
 public class Alpha {
 }
 

 PARSER_END(Alpha)
 SKIP: {
  " " | "\r" | "\t" | "\n" | <"//" (~["\r", "\n"])* >
 }
 TOKEN: {
   <OPEN_CURLY_BRACKET: "{"> |
   <CLOSE_CURLY_BRACKET: "}"> |
   <OPEN_PARENTHESIS: "("> |
   <CLOSE_PARENTHESIS: ")"> |
   <OPEN_BRACKET: "["> |
   <CLOSE_BRACKET: "]"> |
   <INT:"int"> |
   <BOOLEAN:"boolean"> |
   <IF: "if"> |
   <ELSE: "else"> |
   <TRUE: "true"> |
   <THIS: "this"> |
   <WHILE: "while"> |
   <FALSE: "false"> |
   <EQUAL: "="> |
   <COMMA: ";"> |
   <NEW: "new"> |
   <LENGTH: "length"> |
   <AND: "&&"> |
   <MINOR: "<"> |
   <PLUS: "+"> |
   <MINUS: "-"> |
   <PRODUCT: "*"> |
   <DIVISON: "/"> |
   <DOT: "."> |
   <CLASS: "class"> |
   <EXTENDS: "extends">|
   <PUBLIC: "public"> |
   <STATIC: "static">|
   <VOID: "void">|
   <MAIN: "main">|
   <EXCLAMATION_POINT: "!">|
   <NORMAL_COMMA: ",">|
   
   <RETURN: "return">|
   <STRING: "String"> |
  
   <INTEGER_LITERAL: (["0" - "9"])+ > |
   <IDENTIFIER: ( (["A" - "Z", "a" - "z"] (["0" - "9", "A" - "Z", "a" - "z", "_"])* ) ) >
 }
 SimpleNode Program(): {} {
  (ClassDeclaration() <EOF> ) {
   return jjtThis;
  }
 }

 void Class_token() #CLASS : {} 
 {
  <CLASS> 
 } 

 void Identifier_token() #void : {Token t;}
 {
  t = <IDENTIFIER> {
    jjtThis.val = t.image;
  }
  #IDENTIFIER
 } 

 void Extends_token() #void: {}
 {
  <EXTENDS> 
 } 

 void Public_token() #PUBLIC : {}
 {
  <PUBLIC> 
 } 

 void OpenCurlyBracket_token() #void: {}
 {
  <OPEN_CURLY_BRACKET> 
 } 

 void CloseCurlyBracket_token() #void: {}
 {
  <CLOSE_CURLY_BRACKET> 
 } 

 void Comma_token() #void: {}
 {
    <COMMA>
 } 

  void True_token() #TRUE : {}
  {
    <TRUE>
  } 

  void False_token() #FALSE : {}
  {
    <FALSE>
  } 

  void This_token() #THIS : {}
  {
    <THIS>
  } 

  void IntegerLiteral_token() #void : {Token t;}
  {
   t = <INTEGER_LITERAL>{
    jjtThis.val = t.image;
  }
  #INTEGER
  } 

  void New_token() #NEW : {}
  {
    <NEW>
  } 

  void And_token() #void : {}
  {
    <AND>
  } 

 void Minor_token() #void : {}
 {
   <MINOR>
 } 

 void Plus_token() #void : {}
 {
   <PLUS>
 } 

 void Minus_token() #void  : {}
 {
   <MINUS>
 } 

 void Product_token() #void : {}
 {
   <PRODUCT>
 } 

 void Division_token() #void  : {}
 {
   <DIVISON>
 } 

 void OpenParentesis_token() #void : {}
 {
   <OPEN_PARENTHESIS>
 } 

 void CloseParentesis_token() #void : {}
 {
   <CLOSE_PARENTHESIS>
 } 

 void OpenBracket_token() #void : {}
 {
   <OPEN_BRACKET>
 } 

 void CloseBracket_token() #void : {}
 {
   <CLOSE_BRACKET>
 } 

 void Dot_token() #void  : {}
 {
   <DOT>
 } 

 void Length_token() #LENGTH : {}
 {
   <LENGTH>
 } 

 void Static_token() #STATIC : {}
 {
   <STATIC>
 } 

 void Void_token() #VOID : {}
 {
   <VOID>
 } 

 void Main_token() #MAIN : {}
 {
   <MAIN>
 } 

 void String_token() #STRING : {}
 {
   <STRING>
 } 

 void Int_token() #INT : {}
 {
   <INT>
 } 

 void Boolean_token() #BOOLEAN : {}
 {
   <BOOLEAN>
 } 

 void Equal_token() #void  : {}
 {
   <EQUAL>
 } 

 void If_token() #void: {}
 {
   <IF>
 } 

 
 void Else_token() #void : {}
 {
   <ELSE>
 } 

 void While_token() #void : {}
 {
   <WHILE>
 } 

 void NormalComma_token() #void: {}
 {
   <NORMAL_COMMA>
 } 

 void ExclamationPoint_token() #void : {}
 {
   <EXCLAMATION_POINT>
 } 

 void Return_token() #void : {}
 {
   <RETURN>
 } 



 void ClassDeclaration() #void : {}
 {
  Class_token() Identifier_token() [Extends_token() Identifier_token() #EXTENDS] ClassBody()
 }

 void ClassBody() #ClassBody : {}
 {
  OpenCurlyBracket_token()  (VarDeclaration())* ((Public_token() (MainDeclaration() | MethodDeclaration()))*) CloseCurlyBracket_token()
 }

 void VarDeclaration() #VAR_DECLARATION : {}
 {
  Type() Identifier_token() Comma_token()
 }

 void MainDeclaration()  : {}
 {
  Static_token() Void_token() Main_token() MainArgs() MainBody()
 }

 void MainArgs() #Args: {}
 {
  OpenParentesis_token() MainArg() CloseParentesis_token()
 }

 void MainArg() #Arg : {}
 {
  String_token() OpenBracket_token() CloseBracket_token() #ARRAY Identifier_token() 
 }

 void MainBody() #Body: {}
 {
  OpenCurlyBracket_token() (LOOKAHEAD(2) VarDeclaration())* (Statement())* CloseCurlyBracket_token()
 }

 void MethodDeclaration() #METHOD_DECLARATION : {}
 {
  Type() Identifier_token() MethodArgs() MethodBody()
 }

 void MethodArgs() #Args : {}
 {
  OpenParentesis_token() [ MethodArg() (NormalComma_token()  MethodArg())*] CloseParentesis_token()
 }

 void MethodArg() #Arg : {}
 {
   Type() Identifier_token()
 }

 void MethodBody() #Body : {}
 {
  OpenCurlyBracket_token()  (LOOKAHEAD(2) VarDeclaration())* (Statement())* (Return_token() Expression() #RETURN) Comma_token() CloseCurlyBracket_token()
 }

 void Type() #void : {}
 {
   (Int_token() (OpenBracket_token()  CloseBracket_token() #ARRAY )?) |
   (Boolean_token()) |
   (Identifier_token())
 }



 void Statement() #void : {}
 {
    (OpenCurlyBracket_token() (Statement())* CloseCurlyBracket_token()) |
    (If()) |
    (While())|
    LOOKAHEAD(2)
    (Identifier_token() NoIdentifierStartStament()) |
    (Expression() Comma_token())
 }

 void NoIdentifierStartStament() #void : {}
 {
  ( Equal_token()  Expression() #EQUAL(2) Comma_token() ) |
  ( OpenBracket_token() Expression() #INDEX(2) CloseBracket_token() Equal_token() Expression() #EQUAL(2) Comma_token())
 }


void If() #If: {} {
  If_token() IfCondition() IfBody()  Else()
}

void Else() #Else : {}
{
  Else_token() ElseBody()
}

void IfCondition() #Condition : {}
{
  OpenParentesis_token() Expression() CloseParentesis_token()
}

void IfBody() #Body : {}
{
  Statement()
}

void ElseBody() #Body : {}
{
  Statement()
}



 void While() #While: {} {
  try {
    (While_token() WhileCondition() WhileBody() ) 
  } catch (ParseException e) {
    error_skipto(e, OPEN_CURLY_BRACKET);
  }
 }

 void WhileCondition() #Condition: {}
 {
  OpenParentesis_token() Expression() CloseParentesis_token()
 }

 void WhileBody() #Body: {}
 {
  Statement()
 }


void Expression() #void : {}
{
   NoExpressionExpression()
}

void ExpressionTerm() #void : {}
{
  (True_token()) |
  (False_token()) |
  (This_token()) |
  (IntegerLiteral_token()) |
  (newFunc() )|
  (Identifier_token()) |
  (ExclamationPoint_token() Expression()) |
  (OpenParentesis_token() Expression() CloseParentesis_token())
}

void newFunc() : {}
{
New_token()  IntIdentifierExpression()
}

void NoExpressionExpression() #void : {}
{
  And()
}

void Dot() #void: {}
{
  Dot_token() NoDotExpression() #DOT(2)
}

void And() #void : {}
{
  Minor() (LOOKAHEAD(2) AndExpr())*
}

void Minor() #void : {}
{
  Plus() (LOOKAHEAD(2) MinorExpr())*
}

void Plus() #void : {}
{
  Product() (LOOKAHEAD(2)  ( PlusExpr() | MinusExpr() ))*
}


void Product() #void  : {}
{
  ExpressionTermDotArray() (LOOKAHEAD(2) ( ProductExpr() | DivisionExpr() ) )*    
}


void AndExpr() #void : {} 
{
    And_token() And() #AND(2)
}

void MinorExpr() #void : {} 
{
   Minor_token() Plus() #MINOR(2)
}

void PlusExpr() #void : {} 
{
  Plus_token()  Product()  #PLUS(2)
}

void MinusExpr() #void : {} 
{
  Minus_token()  Product()  #MINUS(2)
}

void ProductExpr() #void : {} 
{
  Product_token()  ExpressionTermDotArray()   #PRODUCT(2)
}

void DivisionExpr() #void : {} 
{
  Division_token()  ExpressionTermDotArray()   #DIVISION(2)
}


void ExpressionTermDotArray() # void : {}
{
 ExpressionTerm() [LOOKAHEAD(2) ((OpenBracket_token() Expression() #INDEX(2) CloseBracket_token())| (Dot()))]
}

void NoDotExpression() #void: {}
{
  (Length_token()) |
  (Identifier_token()
  FuncArgs()) #FUNC 
}

void FuncArgs() #FUNC_ARGS : {}
{
  OpenParentesis_token() ( (Expression() #FUNC_ARG) (NormalComma_token()  Expression() #FUNC_ARG)* )? CloseParentesis_token()
}


void IntIdentifierExpression() #void : {}
{
 (Int_token() OpenBracket_token() Expression() CloseBracket_token()) |
  (Identifier_token() #FUNC OpenParentesis_token() CloseParentesis_token()) 
}


 
 JAVACODE
 void error_skipto(ParseException e, int kind) {
   System.out.println(e.toString());  // print the error message
   Token t;
   Token nextT;
   do {
     t = getNextToken();
     nextT = getToken(1);
   } while (nextT.kind != kind);
     // The above loop consumes tokens all the way up to a token of
     // "kind".  We use a do-while loop rather than a while because the
     // current token is the one immediately before the erroneous token
     // (in our case the token immediately before what should have been
     // "if"/"while".
 }