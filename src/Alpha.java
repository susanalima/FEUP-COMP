/* Generated By:JJTree&JavaCC: Do not edit this line. Alpha.java */
 public class Alpha/*@bgen(jjtree)*/implements AlphaTreeConstants, AlphaConstants {/*@bgen(jjtree)*/
  protected static JJTAlphaState jjtree = new JJTAlphaState();

  static final public SimpleNode Program() throws ParseException {
                        /*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
      jj_consume_token(0);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Class_token() throws ParseException {
                              /*@bgen(jjtree) CLASS */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CLASS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Identifier_token() throws ParseException {
                                  Token t;
    t = jj_consume_token(IDENTIFIER);
                     SimpleNode jjtn001 = new SimpleNode(JJTIDENTIFIER);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
    try {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtc001 = false;
    jjtn001.val = t.image;
    } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
    }
  }

  static final public void Extends_token() throws ParseException {
    jj_consume_token(EXTENDS);
  }

  static final public void Public_token() throws ParseException {
                                /*@bgen(jjtree) PUBLIC */
  SimpleNode jjtn000 = new SimpleNode(JJTPUBLIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PUBLIC);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void OpenCurlyBracket_token() throws ParseException {
    jj_consume_token(OPEN_CURLY_BRACKET);
  }

  static final public void CloseCurlyBracket_token() throws ParseException {
    jj_consume_token(CLOSE_CURLY_BRACKET);
  }

  static final public void Comma_token() throws ParseException {
    jj_consume_token(COMMA);
  }

  static final public void True_token() throws ParseException {
                             /*@bgen(jjtree) TRUE */
  SimpleNode jjtn000 = new SimpleNode(JJTTRUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TRUE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void False_token() throws ParseException {
                               /*@bgen(jjtree) FALSE */
  SimpleNode jjtn000 = new SimpleNode(JJTFALSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FALSE);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void This_token() throws ParseException {
                             /*@bgen(jjtree) THIS */
  SimpleNode jjtn000 = new SimpleNode(JJTTHIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THIS);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void IntegerLiteral_token() throws ParseException {
                                       Token t;
    t = jj_consume_token(INTEGER_LITERAL);
                          SimpleNode jjtn001 = new SimpleNode(JJTINTEGER);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
    try {
                          jjtree.closeNodeScope(jjtn001, true);
                          jjtc001 = false;
    jjtn001.val = t.image;
    } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
    }
  }

  static final public void New_token() throws ParseException {
                           /*@bgen(jjtree) NEW */
  SimpleNode jjtn000 = new SimpleNode(JJTNEW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void And_token() throws ParseException {
    jj_consume_token(AND);
  }

  static final public void Minor_token() throws ParseException {
    jj_consume_token(MINOR);
  }

  static final public void Plus_token() throws ParseException {
    jj_consume_token(PLUS);
  }

  static final public void Minus_token() throws ParseException {
    jj_consume_token(MINUS);
  }

  static final public void Product_token() throws ParseException {
    jj_consume_token(PRODUCT);
  }

  static final public void Division_token() throws ParseException {
    jj_consume_token(DIVISON);
  }

  static final public void OpenParentesis_token() throws ParseException {
    jj_consume_token(OPEN_PARENTHESIS);
  }

  static final public void CloseParentesis_token() throws ParseException {
    jj_consume_token(CLOSE_PARENTHESIS);
  }

  static final public void OpenBracket_token() throws ParseException {
    jj_consume_token(OPEN_BRACKET);
  }

  static final public void CloseBracket_token() throws ParseException {
    jj_consume_token(CLOSE_BRACKET);
  }

  static final public void Dot_token() throws ParseException {
    jj_consume_token(DOT);
  }

  static final public void Length_token() throws ParseException {
                                /*@bgen(jjtree) LENGTH */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LENGTH);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Static_token() throws ParseException {
                                /*@bgen(jjtree) STATIC */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Void_token() throws ParseException {
                            /*@bgen(jjtree) VOID */
  SimpleNode jjtn000 = new SimpleNode(JJTVOID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VOID);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Main_token() throws ParseException {
                            /*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void String_token() throws ParseException {
                                /*@bgen(jjtree) STRING */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STRING);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Int_token() throws ParseException {
                          /*@bgen(jjtree) INT */
  SimpleNode jjtn000 = new SimpleNode(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Boolean_token() throws ParseException {
                                  /*@bgen(jjtree) BOOLEAN */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BOOLEAN);
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void Equal_token() throws ParseException {
    jj_consume_token(EQUAL);
  }

  static final public void If_token() throws ParseException {
    jj_consume_token(IF);
  }

  static final public void Else_token() throws ParseException {
    jj_consume_token(ELSE);
  }

  static final public void While_token() throws ParseException {
    jj_consume_token(WHILE);
  }

  static final public void NormalComma_token() throws ParseException {
    jj_consume_token(NORMAL_COMMA);
  }

  static final public void ExclamationPoint_token() throws ParseException {
    jj_consume_token(EXCLAMATION_POINT);
  }

  static final public void Return_token() throws ParseException {
    jj_consume_token(RETURN);
  }

  static final public void ClassDeclaration() throws ParseException {
    Class_token();
    Identifier_token();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      Extends_token();
                                                      SimpleNode jjtn001 = new SimpleNode(JJTEXTENDS);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
      try {
        Identifier_token();
      } catch (Throwable jjte001) {
                                                      if (jjtc001) {
                                                        jjtree.clearNodeScope(jjtn001);
                                                        jjtc001 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte001 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte001;}
                                                      }
                                                      if (jjte001 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte001;}
                                                      }
                                                      {if (true) throw (Error)jjte001;}
      } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001, true);
                                                      }
      }
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    ClassBody();
  }

  static final public void ClassBody() throws ParseException {
                                /*@bgen(jjtree) ClassBody */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenCurlyBracket_token();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        Public_token();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
          MainDeclaration();
          break;
        case INT:
        case BOOLEAN:
        case IDENTIFIER:
          MethodDeclaration();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      CloseCurlyBracket_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void VarDeclaration() throws ParseException {
                                           /*@bgen(jjtree) VAR_DECLARATION */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier_token();
      Comma_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MainDeclaration() throws ParseException {
                            /*@bgen(jjtree) MainDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Static_token();
      Void_token();
      Main_token();
      MainArgs();
      MainBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MainArgs() throws ParseException {
                         /*@bgen(jjtree) Args */
  SimpleNode jjtn000 = new SimpleNode(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenParentesis_token();
      MainArg();
      CloseParentesis_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MainArg() throws ParseException {
                        /*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      String_token();
      OpenBracket_token();
                                       SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
      try {
        CloseBracket_token();
      } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
      } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                       }
      }
      Identifier_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MainBody() throws ParseException {
                         /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenCurlyBracket_token();
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_CURLY_BRACKET:
        case OPEN_PARENTHESIS:
        case IF:
        case TRUE:
        case THIS:
        case WHILE:
        case FALSE:
        case NEW:
        case EXCLAMATION_POINT:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Statement();
      }
      CloseCurlyBracket_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MethodDeclaration() throws ParseException {
                                                 /*@bgen(jjtree) METHOD_DECLARATION */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHOD_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier_token();
      MethodArgs();
      MethodBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MethodArgs() throws ParseException {
                            /*@bgen(jjtree) Args */
  SimpleNode jjtn000 = new SimpleNode(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenParentesis_token();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case IDENTIFIER:
        MethodArg();
        label_5:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NORMAL_COMMA:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_5;
          }
          NormalComma_token();
          MethodArg();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      CloseParentesis_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MethodArg() throws ParseException {
                          /*@bgen(jjtree) Arg */
  SimpleNode jjtn000 = new SimpleNode(JJTARG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Type();
      Identifier_token();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void MethodBody() throws ParseException {
                            /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenCurlyBracket_token();
      label_6:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_6;
        }
        VarDeclaration();
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_CURLY_BRACKET:
        case OPEN_PARENTHESIS:
        case IF:
        case TRUE:
        case THIS:
        case WHILE:
        case FALSE:
        case NEW:
        case EXCLAMATION_POINT:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        Statement();
      }
      Return_token();
                                                                                              SimpleNode jjtn001 = new SimpleNode(JJTRETURN);
                                                                                              boolean jjtc001 = true;
                                                                                              jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
                                                                                              if (jjtc001) {
                                                                                                jjtree.clearNodeScope(jjtn001);
                                                                                                jjtc001 = false;
                                                                                              } else {
                                                                                                jjtree.popNode();
                                                                                              }
                                                                                              if (jjte001 instanceof RuntimeException) {
                                                                                                {if (true) throw (RuntimeException)jjte001;}
                                                                                              }
                                                                                              if (jjte001 instanceof ParseException) {
                                                                                                {if (true) throw (ParseException)jjte001;}
                                                                                              }
                                                                                              {if (true) throw (Error)jjte001;}
      } finally {
                                                                                              if (jjtc001) {
                                                                                                jjtree.closeNodeScope(jjtn001, true);
                                                                                              }
      }
      Comma_token();
      CloseCurlyBracket_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      Int_token();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_BRACKET:
        OpenBracket_token();
                                        SimpleNode jjtn001 = new SimpleNode(JJTARRAY);
                                        boolean jjtc001 = true;
                                        jjtree.openNodeScope(jjtn001);
        try {
          CloseBracket_token();
        } catch (Throwable jjte001) {
                                        if (jjtc001) {
                                          jjtree.clearNodeScope(jjtn001);
                                          jjtc001 = false;
                                        } else {
                                          jjtree.popNode();
                                        }
                                        if (jjte001 instanceof RuntimeException) {
                                          {if (true) throw (RuntimeException)jjte001;}
                                        }
                                        if (jjte001 instanceof ParseException) {
                                          {if (true) throw (ParseException)jjte001;}
                                        }
                                        {if (true) throw (Error)jjte001;}
        } finally {
                                        if (jjtc001) {
                                          jjtree.closeNodeScope(jjtn001, true);
                                        }
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    case BOOLEAN:
      Boolean_token();
      break;
    case IDENTIFIER:
      Identifier_token();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_CURLY_BRACKET:
      OpenCurlyBracket_token();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_CURLY_BRACKET:
        case OPEN_PARENTHESIS:
        case IF:
        case TRUE:
        case THIS:
        case WHILE:
        case FALSE:
        case NEW:
        case EXCLAMATION_POINT:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        Statement();
      }
      CloseCurlyBracket_token();
      break;
    case IF:
      If();
      break;
    case WHILE:
      While();
      break;
    default:
      jj_la1[11] = jj_gen;
      if (jj_2_3(2)) {
        Identifier_token();
        NoIdentifierStartStament();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_PARENTHESIS:
        case TRUE:
        case THIS:
        case FALSE:
        case NEW:
        case EXCLAMATION_POINT:
        case INTEGER_LITERAL:
        case IDENTIFIER:
          Expression();
          Comma_token();
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void NoIdentifierStartStament() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      Equal_token();
                     SimpleNode jjtn001 = new SimpleNode(JJTEQUAL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        Expression();
      } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
      }
      Comma_token();
      break;
    case OPEN_BRACKET:
      OpenBracket_token();
                          SimpleNode jjtn002 = new SimpleNode(JJTINDEX);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
      try {
        Expression();
      } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
      } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
      }
      CloseBracket_token();
      Equal_token();
                                                                                    SimpleNode jjtn003 = new SimpleNode(JJTEQUAL);
                                                                                    boolean jjtc003 = true;
                                                                                    jjtree.openNodeScope(jjtn003);
      try {
        Expression();
      } catch (Throwable jjte003) {
                                                                                    if (jjtc003) {
                                                                                      jjtree.clearNodeScope(jjtn003);
                                                                                      jjtc003 = false;
                                                                                    } else {
                                                                                      jjtree.popNode();
                                                                                    }
                                                                                    if (jjte003 instanceof RuntimeException) {
                                                                                      {if (true) throw (RuntimeException)jjte003;}
                                                                                    }
                                                                                    if (jjte003 instanceof ParseException) {
                                                                                      {if (true) throw (ParseException)jjte003;}
                                                                                    }
                                                                                    {if (true) throw (Error)jjte003;}
      } finally {
                                                                                    if (jjtc003) {
                                                                                      jjtree.closeNodeScope(jjtn003,  2);
                                                                                    }
      }
      Comma_token();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void If() throws ParseException {
                /*@bgen(jjtree) If */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      If_token();
      IfCondition();
      IfBody();
      Else();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Else() throws ParseException {
                     /*@bgen(jjtree) Else */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Else_token();
      ElseBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfCondition() throws ParseException {
                                 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenParentesis_token();
      Expression();
      CloseParentesis_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IfBody() throws ParseException {
                       /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ElseBody() throws ParseException {
                         /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void While() throws ParseException {
                       /*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        While_token();
        WhileCondition();
        WhileBody();
      } catch (ParseException e) {
    error_skipto(e, OPEN_CURLY_BRACKET);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhileCondition() throws ParseException {
                                    /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenParentesis_token();
      Expression();
      CloseParentesis_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void WhileBody() throws ParseException {
                          /*@bgen(jjtree) Body */
  SimpleNode jjtn000 = new SimpleNode(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expression() throws ParseException {
    NoExpressionExpression();
  }

  static final public void ExpressionTerm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      True_token();
      break;
    case FALSE:
      False_token();
      break;
    case THIS:
      This_token();
      break;
    case INTEGER_LITERAL:
      IntegerLiteral_token();
      break;
    case NEW:
      newFunc();
      break;
    case IDENTIFIER:
      Identifier_token();
      break;
    case OPEN_PARENTHESIS:
      OpenParentesis_token();
      Expression();
      CloseParentesis_token();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void newFunc() throws ParseException {
                  /*@bgen(jjtree) newFunc */
  SimpleNode jjtn000 = new SimpleNode(JJTNEWFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      New_token();
      IntIdentifierExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void NoExpressionExpression() throws ParseException {
    And();
  }

  static final public void Dot() throws ParseException {
    Dot_token();
                SimpleNode jjtn001 = new SimpleNode(JJTDOT);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
    try {
      NoDotExpression();
    } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  {if (true) throw (RuntimeException)jjte001;}
                }
                if (jjte001 instanceof ParseException) {
                  {if (true) throw (ParseException)jjte001;}
                }
                {if (true) throw (Error)jjte001;}
    } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  2);
                }
    }
  }

  static final public void And() throws ParseException {
    Minor();
    label_9:
    while (true) {
      if (jj_2_4(2)) {
        ;
      } else {
        break label_9;
      }
      AndExpr();
    }
  }

  static final public void Minor() throws ParseException {
    Plus();
    label_10:
    while (true) {
      if (jj_2_5(2)) {
        ;
      } else {
        break label_10;
      }
      MinorExpr();
    }
  }

  static final public void Plus() throws ParseException {
    Product();
    label_11:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        PlusExpr();
        break;
      case MINUS:
        MinusExpr();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Product() throws ParseException {
    ExpressionTermDotArray();
    label_12:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRODUCT:
        ProductExpr();
        break;
      case DIVISON:
        DivisionExpr();
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void AndExpr() throws ParseException {
    And_token();
                  SimpleNode jjtn001 = new SimpleNode(JJTAND);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
    try {
      And();
    } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
    } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
    }
  }

  static final public void MinorExpr() throws ParseException {
    Minor_token();
                   SimpleNode jjtn001 = new SimpleNode(JJTMINOR);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
    try {
      Plus();
    } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
    } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
    }
  }

  static final public void PlusExpr() throws ParseException {
    Plus_token();
                  SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
    try {
      Product();
    } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
    } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
    }
  }

  static final public void MinusExpr() throws ParseException {
    Minus_token();
                   SimpleNode jjtn001 = new SimpleNode(JJTMINUS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
    try {
      Product();
    } catch (Throwable jjte001) {
                   if (jjtc001) {
                     jjtree.clearNodeScope(jjtn001);
                     jjtc001 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte001 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte001;}
                   }
                   if (jjte001 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte001;}
                   }
                   {if (true) throw (Error)jjte001;}
    } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001,  2);
                   }
    }
  }

  static final public void ProductExpr() throws ParseException {
    Product_token();
                     SimpleNode jjtn001 = new SimpleNode(JJTPRODUCT);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
    try {
      ExpressionTermDotArray();
    } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
    } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  2);
                     }
    }
  }

  static final public void DivisionExpr() throws ParseException {
    Division_token();
                      SimpleNode jjtn001 = new SimpleNode(JJTDIVISION);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
    try {
      ExpressionTermDotArray();
    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte001;}
                      }
                      if (jjte001 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte001;}
                      }
                      {if (true) throw (Error)jjte001;}
    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001,  2);
                      }
    }
  }

  static final public void ExpressionTermDotArray() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_PARENTHESIS:
    case TRUE:
    case THIS:
    case FALSE:
    case NEW:
    case INTEGER_LITERAL:
    case IDENTIFIER:
      ExpressionTerm();
      if (jj_2_8(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_BRACKET:
          OpenBracket_token();
                                                         SimpleNode jjtn001 = new SimpleNode(JJTINDEX);
                                                         boolean jjtc001 = true;
                                                         jjtree.openNodeScope(jjtn001);
          try {
            Expression();
          } catch (Throwable jjte001) {
                                                         if (jjtc001) {
                                                           jjtree.clearNodeScope(jjtn001);
                                                           jjtc001 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte001 instanceof RuntimeException) {
                                                           {if (true) throw (RuntimeException)jjte001;}
                                                         }
                                                         if (jjte001 instanceof ParseException) {
                                                           {if (true) throw (ParseException)jjte001;}
                                                         }
                                                         {if (true) throw (Error)jjte001;}
          } finally {
                                                         if (jjtc001) {
                                                           jjtree.closeNodeScope(jjtn001,  2);
                                                         }
          }
          CloseBracket_token();
          break;
        case DOT:
          Dot();
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      break;
    case EXCLAMATION_POINT:
      ExclamationPoint_token();
                               SimpleNode jjtn002 = new SimpleNode(JJTNOT);
                               boolean jjtc002 = true;
                               jjtree.openNodeScope(jjtn002);
      try {
        ExpressionTermDotArray();
      } catch (Throwable jjte002) {
                               if (jjtc002) {
                                 jjtree.clearNodeScope(jjtn002);
                                 jjtc002 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte002 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte002;}
                               }
                               if (jjte002 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte002;}
                               }
                               {if (true) throw (Error)jjte002;}
      } finally {
                               if (jjtc002) {
                                 jjtree.closeNodeScope(jjtn002, true);
                               }
      }
      if (jj_2_9(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_BRACKET:
          OpenBracket_token();
                                                                                                 SimpleNode jjtn003 = new SimpleNode(JJTINDEX);
                                                                                                 boolean jjtc003 = true;
                                                                                                 jjtree.openNodeScope(jjtn003);
          try {
            Expression();
          } catch (Throwable jjte003) {
                                                                                                 if (jjtc003) {
                                                                                                   jjtree.clearNodeScope(jjtn003);
                                                                                                   jjtc003 = false;
                                                                                                 } else {
                                                                                                   jjtree.popNode();
                                                                                                 }
                                                                                                 if (jjte003 instanceof RuntimeException) {
                                                                                                   {if (true) throw (RuntimeException)jjte003;}
                                                                                                 }
                                                                                                 if (jjte003 instanceof ParseException) {
                                                                                                   {if (true) throw (ParseException)jjte003;}
                                                                                                 }
                                                                                                 {if (true) throw (Error)jjte003;}
          } finally {
                                                                                                 if (jjtc003) {
                                                                                                   jjtree.closeNodeScope(jjtn003,  2);
                                                                                                 }
          }
          CloseBracket_token();
          break;
        case DOT:
          Dot();
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NoDotExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LENGTH:
      Length_token();
      break;
    case IDENTIFIER:
    SimpleNode jjtn001 = new SimpleNode(JJTFUNC);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        Identifier_token();
        FuncArgs();
      } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void FuncArgs() throws ParseException {
                              /*@bgen(jjtree) FUNC_ARGS */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC_ARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenParentesis_token();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_PARENTHESIS:
      case TRUE:
      case THIS:
      case FALSE:
      case NEW:
      case EXCLAMATION_POINT:
      case INTEGER_LITERAL:
      case IDENTIFIER:
                              SimpleNode jjtn001 = new SimpleNode(JJTFUNC_ARG);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
        try {
          Expression();
        } catch (Throwable jjte001) {
                              if (jjtc001) {
                                jjtree.clearNodeScope(jjtn001);
                                jjtc001 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte001 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte001;}
                              }
                              if (jjte001 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte001;}
                              }
                              {if (true) throw (Error)jjte001;}
        } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                              }
        }
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NORMAL_COMMA:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_13;
          }
          NormalComma_token();
                                                                            SimpleNode jjtn002 = new SimpleNode(JJTFUNC_ARG);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
          try {
            Expression();
          } catch (Throwable jjte002) {
                                                                            if (jjtc002) {
                                                                              jjtree.clearNodeScope(jjtn002);
                                                                              jjtc002 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte002 instanceof RuntimeException) {
                                                                              {if (true) throw (RuntimeException)jjte002;}
                                                                            }
                                                                            if (jjte002 instanceof ParseException) {
                                                                              {if (true) throw (ParseException)jjte002;}
                                                                            }
                                                                            {if (true) throw (Error)jjte002;}
          } finally {
                                                                            if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                            }
          }
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      CloseParentesis_token();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void IntIdentifierExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      Int_token();
      OpenBracket_token();
      Expression();
      CloseBracket_token();
      break;
    case IDENTIFIER:
     SimpleNode jjtn001 = new SimpleNode(JJTFUNC);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        Identifier_token();
      } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      OpenParentesis_token();
      CloseParentesis_token();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static void error_skipto(ParseException e, int kind) throws ParseException {
                                                /*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {System.out.println(e.toString());  // print the error message
   Token t;
   Token nextT;
   do {
     t = getNextToken();
     nextT = getToken(1);
   } while (nextT.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_27()) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    return false;
  }

  static private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(10)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(10)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(8)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AlphaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x3000,0x0,0x3000,0x4f4140,0x0,0x3000,0x4f4140,0x400,0x3000,0x4f4140,0x44040,0x4b0100,0x100400,0x4b0100,0xc000000,0x30000000,0x40000400,0x40000400,0x4b0100,0x800000,0x0,0x4b0100,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x400,0x2,0x404,0x620,0x40,0x400,0x620,0x0,0x400,0x620,0x0,0x620,0x0,0x600,0x0,0x0,0x0,0x0,0x620,0x400,0x40,0x620,0x400,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[9];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Alpha(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Alpha(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AlphaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Alpha(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AlphaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Alpha(AlphaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AlphaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 9; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

 }
